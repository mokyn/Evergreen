{"version":3,"sources":["images/ladybug.png","images/bee.png","images/mite.png","images/slug.png","images/background.jpg","app.tsx","index.tsx"],"names":["VIEW_WIDTH","document","documentElement","clientWidth","VIEW_HEIGHT","clientHeight","Modal","props","modalContent","modalHeader","hasWon","isFriendly","showModal","className","onClick","type","Bug","useState","Math","random","x","setX","y","setY","targetX","setTargetX","targetY","setTargetY","posIntervalID","useRef","moveIntervalID","useEffect","current","window","setInterval","clearInterval","moveRate","width","height","src","BUGS","bugType","imgSrc","alt","LADY_BUG","ladyBugImg","BEE","beeImg","MITE","miteImg","SLUG","slugImg","bugTypes","Object","keys","Game","setShowModal","currentBugType","setCurrentBugType","setHasWon","Set","correctBugs","setCorrectBugs","bugIds","setBugIds","intervalID","numSpawnedBugs","length","prevState","toggleModal","getRandomBug","id","randomBugTypeIndex","map","bugId","Error","has","add","size","newBugs","i","splice","handleBug","backgroundImg","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.070c315f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/ladybug.c24447a0.png\";","export default __webpack_public_path__ + \"static/media/bee.ffdfa50e.png\";","export default __webpack_public_path__ + \"static/media/mite.d75bc2db.png\";","export default __webpack_public_path__ + \"static/media/slug.d3f61490.png\";","export default __webpack_public_path__ + \"static/media/background.dea6d3c6.jpg\";","import React, { useState, useEffect, useRef } from \"react\";\n// import ReactDOM from \"react-dom\";\nimport \"./app.css\";\nimport ladyBugImg from \"./images/ladybug.png\";\nimport beeImg from \"./images/bee.png\";\nimport miteImg from \"./images/mite.png\";\nimport slugImg from \"./images/slug.png\";\nimport backgroundImg from \"./images/background.jpg\";\n\n// number of bad bugs to be clicked to win the game\nconst TARGET_CORRECT_GUESSES: number = 2;\n\n// number of max bugs on screen at any time\nconst UPPER_BUG_COUNT: number = 5;\n\nconst VIEW_WIDTH = document.documentElement.clientWidth;\nconst VIEW_HEIGHT = document.documentElement.clientHeight;\n\n// modal component that appears when clicking a bug\ninterface ModalProps {\n  showModal: boolean;\n  hasWon: boolean;\n  isFriendly: boolean;\n  onClick: () => void;\n}\n\nconst Modal: React.FC<ModalProps> = (props) => {\n  let modalContent, modalHeader;\n  if (props.hasWon) {\n    modalHeader = \"Congratulations!\";\n    modalContent = \"You have won the game.\";\n  } else if (props.isFriendly) {\n    modalHeader = \"Oops!\";\n    modalContent = \"That's a good bug.\";\n  } else {\n    modalHeader = \"Correct!\";\n    modalContent = \"That's a bad bug.\";\n  }\n\n  if (props.showModal) {\n    return (\n      <>\n        <div className=\"justify-center items-center flex overflow-x-hidden overflow-y-auto fixed inset-0 z-50 outline-none focus:outline-none\">\n          <div className=\"relative w-auto my-6 mx-auto max-w-3xl\">\n            {/*content*/}\n            <div className=\"border-0 rounded-lg shadow-lg relative flex flex-col w-full bg-white outline-none focus:outline-none\">\n              {/*header*/}\n              <div className=\"flex items-start justify-between p-5 border-b border-solid border-blueGray-200 rounded-t\">\n                <h3 className=\"text-3xl font-semibold\">{modalHeader}</h3>\n                <button\n                  className=\"p-1 ml-auto bg-transparent border-0 text-black opacity-5 float-right text-3xl leading-none font-semibold outline-none focus:outline-none\"\n                  onClick={props.onClick}\n                >\n                  <span className=\"bg-transparent text-black opacity-5 h-6 w-6 text-2xl block outline-none focus:outline-none\">\n                    Ã—\n                  </span>\n                </button>\n              </div>\n              {/*body*/}\n              <div className=\"relative p-6 flex-auto\">\n                <p className=\"my-4 text-blueGray-500 text-lg leading-relaxed\">\n                  {modalContent}\n                </p>\n              </div>\n              {/*footer*/}\n              <div className=\"flex items-center justify-end p-6 border-t border-solid border-blueGray-200 rounded-b\">\n                <button\n                  className=\"text-red-500 background-transparent font-bold uppercase px-6 py-2 text-sm outline-none focus:outline-none mr-1 mb-1 ease-linear transition-all duration-150\"\n                  type=\"button\"\n                  onClick={props.onClick}\n                >\n                  Close\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"opacity-25 fixed inset-0 z-40 bg-black\"></div>\n      </>\n    );\n  } else {\n    return null;\n  }\n};\n\n// bug component\ninterface BugProps {\n  key: number;\n  id: number;\n  bugType: string;\n  onClick?: () => void;\n}\n\nconst Bug: React.FC<BugProps> = (props) => {\n  const [x, setX] = useState(VIEW_WIDTH * Math.random());\n  const [y, setY] = useState(VIEW_HEIGHT * Math.random());\n  const [targetX, setTargetX] = useState(VIEW_WIDTH * Math.random());\n  const [targetY, setTargetY] = useState(VIEW_HEIGHT * Math.random());\n\n  // useRef hook enables values to persist in successive renders\n  const posIntervalID = useRef(0);\n  const moveIntervalID = useRef(0);\n\n  useEffect(() => {\n    // when component mounts\n    const newPos = () => {\n      setTargetX(VIEW_WIDTH * Math.random());\n      setTargetY(VIEW_HEIGHT * Math.random());\n    };\n\n    // component finds a new target position every 2 second\n    posIntervalID.current = window.setInterval(newPos, 2000);\n\n    return () => {\n      // when component unmounts\n      clearInterval(posIntervalID.current);\n    };\n  }, []);\n\n  useEffect(() => {\n    const move = () => {\n      const moveRate = 0.01;\n\n      setX((x) => (moveRate * targetX + x) / (1 + moveRate));\n      setY((y) => (moveRate * targetY + y) / (1 + moveRate));\n    };\n\n    // component changes x, y values every 20ms\n    moveIntervalID.current = window.setInterval(move, 20);\n\n    return () => {\n      clearInterval(moveIntervalID.current);\n    };\n  }, [targetX, targetY]);\n\n  return (\n    // foreign object is used to wrap the image and render it on svg canvas\n    <foreignObject x={x} y={y} width=\"100\" height=\"97\" onClick={props.onClick}>\n      <img\n        src={BUGS[props.bugType].imgSrc}\n        alt={`${props.bugType}`}\n        className=\"bug-img\"\n      />\n    </foreignObject>\n  );\n};\n\ninterface BugItem {\n  bugType: string;\n  imgSrc: string;\n  isFriendly: boolean;\n}\n\n// this enum stores all values associated with objects in the game\n// also helps prevent naming inconsistencies\n\nconst BUGS: { [key: string]: BugItem } = {\n  LADY_BUG: {\n    bugType: \"LADY_BUG\",\n    imgSrc: ladyBugImg,\n    isFriendly: true,\n  },\n  BEE: {\n    bugType: \"BEE\",\n    imgSrc: beeImg,\n    isFriendly: true,\n  },\n  MITE: {\n    bugType: \"MITE\",\n    imgSrc: miteImg,\n    isFriendly: false,\n  },\n  SLUG: {\n    bugType: \"SLUG\",\n    imgSrc: slugImg,\n    isFriendly: false,\n  },\n};\n\nconst bugTypes = Object.keys(BUGS);\n\ninterface GameProps {}\n\n// main parent component\nconst Game: React.FC<GameProps> = (props) => {\n  // define states using state hook\n  // typescript implicitly knows the type of each state from initial value\n  const [showModal, setShowModal] = useState(false);\n  const [currentBugType, setCurrentBugType] = useState(\"\"); // so that modal component knows a bug is good or bad\n  const [hasWon, setHasWon] = useState(false);\n  const [correctBugs, setCorrectBugs] = useState(new Set()); // tracking progress\n  const [bugIds, setBugIds] = useState<number[]>([]); // an array of bug ids\n\n  const intervalID = useRef(0);\n\n  // this variable keeps track of total # of spawned bugs\n  // also sets the id for a newest spawned bug\n  const numSpawnedBugs = useRef(0);\n\n  // component did mount\n  useEffect(() => {\n    // create a new bug and give it a unique index\n\n    const spawnNewBug = () => {\n      // if (n > UPPER_COUNT) return\n      if (bugIds.length >= UPPER_BUG_COUNT) {\n        return;\n      } else {\n        numSpawnedBugs.current += 1;\n        setBugIds((prevState) => {\n          return [...prevState, numSpawnedBugs.current];\n        });\n      }\n    };\n\n    intervalID.current = window.setInterval(spawnNewBug, 1000);\n\n    return () => {\n      clearInterval(intervalID.current);\n    };\n  }, [bugIds, numSpawnedBugs]);\n\n  /**\n   * toggles the render state of modal component\n   */\n  const toggleModal = () => {\n    setShowModal((prevState) => !prevState);\n  };\n\n  /**\n   * Delivers info about current clicked bug to Modal and removes the bug from screen\n   *\n   * @param bugId - the id of the bug so that it can be deleted from bugs array\n   */\n  const handleBug = (bugType: string, bugId: number) => {\n    toggleModal();\n\n    setCurrentBugType(bugType);\n\n    if (BUGS[bugType]) {\n      if (!BUGS[bugType].isFriendly) {\n        if (!hasWon) {\n          if (!correctBugs.has(bugType)) {\n            // does not have bugId yet\n            if (correctBugs.add(bugType).size === TARGET_CORRECT_GUESSES) {\n              // check for win on next guess\n              setHasWon(true);\n              setCorrectBugs(new Set());\n            } else {\n              // if next guess not win, just add to list\n              setHasWon(false);\n              setCorrectBugs((prevState) => {\n                return new Set([...prevState, bugType]);\n              });\n            }\n          } else {\n            // already has bugId\n            // do nothing\n          }\n        } else {\n          // reset if u click bad bug after winning game\n          setHasWon(false);\n          setCorrectBugs((prevState) => {\n            return new Set([...prevState, bugType]);\n          });\n        }\n      } else {\n        // if bug is not friendly\n        if (hasWon) {\n          // reset if u click good bug after winning game\n          setHasWon(false);\n          setCorrectBugs(new Set());\n        } else {\n          // this triggers when correctBugs set is either empty or not-yet-full\n          // two possibilities\n          // resets all progress if u click on a good bug\n          setHasWon(false);\n          setCorrectBugs(new Set());\n\n          // or keep the current progress (keep the set)\n          //   setHasWon(false);\n        }\n      }\n    } else {\n      throw new Error(\"Whoops! The given BugId does not exist in BUGS object.\");\n    }\n\n    // removes the bug from bugIds array so that it is no longer rendered\n    let newBugs = bugIds;\n    for (let i = 0; i < bugIds.length; i++) {\n      if (bugIds[i] === bugId) {\n        newBugs.splice(i, 1);\n      }\n    }\n\n    setBugIds(newBugs);\n  };\n\n  /**\n   * gets a unique index (hash) for a given id\n   * @param id : id of the bug that was clicked\n   * @returns a random bugType unique to the id\n   */\n  const getRandomBug = (id: number) => {\n    // for ultimate difficulty :p\n    // const randomNum: number = Math.floor(3 * Math.random());\n\n    // generate a random index for the id\n    const randomBugTypeIndex = id % bugTypes.length;\n\n    return bugTypes[randomBugTypeIndex];\n  };\n\n  // render\n  return (\n    <>\n      <Modal\n        showModal={showModal}\n        isFriendly={currentBugType ? BUGS[currentBugType].isFriendly : false}\n        hasWon={hasWon}\n        onClick={() => toggleModal()}\n      />\n\n      <div className=\"absolute top-0 left-0 z-10\">\n        <svg className=\"w-screen h-screen\">\n          {bugIds.map((id) => {\n            return (\n              <Bug\n                key={id}\n                id={id}\n                bugType={getRandomBug(id)}\n                onClick={() => handleBug(getRandomBug(id), id)}\n              />\n            );\n          })}\n        </svg>\n      </div>\n\n      <img\n        className=\"w-screen h-screen z-0 filter blur-sm\"\n        src={backgroundImg}\n        alt=\"background\"\n      />\n    </>\n  );\n};\n\n// ReactDOM.render(<Game />, document.getElementById(\"root\"));\nexport default Game;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport Game from \"./app\";\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n"],"sourceRoot":""}